{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pZpMCsuJh2cr"
      },
      "outputs": [],
      "source": [
        "import matplotlib as plt\n",
        "import math\n",
        "import decimal\n",
        "from IPython.testing import test\n",
        "from re import M\n",
        "from scipy.optimize import fsolve"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#constants\n",
        "e = 1.6 * 10**-19\n",
        "pi = 3.141592654\n",
        "ez = 8.854187817 * 10**-12\n",
        "r0 = 1.2 #fm\n",
        "x = 9 * 10**9\n",
        "h = 6.626 * 10**-34 #(m^2)kg/s [plank's constant]\n",
        "L = 100 #width of barrier\n",
        "#h = 4.135 * (10**-15) #eVs"
      ],
      "metadata": {
        "id": "4etdQgEzigNs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from re import M\n",
        "#calculating height of Coulomb's Barrier\n",
        "def height(Z1,Z2,MA,MB): #charge 1, charge 2, mass 1, mass 2\n",
        "  RA = r0 * (MA ** (1/3)) #returns fm\n",
        "  RB = r0 * (MB ** (1/3)) #fm\n",
        "  d = RA + RB\n",
        "  J = (Z1*Z2*(e**2))/(4*pi*ez*(d*(10**-15)))\n",
        "  MeV = J * (6.242 * (10**12))\n",
        "  return str(MeV) + \" MeV\"\n",
        "\n",
        "def convert (MeV):\n",
        "  eV = MeV * 1000000\n",
        "  return eV\n",
        "\n",
        "#tests\n",
        "#test A with hydrogen and hydrogen\n",
        "test1 = height(1,1,1.00784,1.00784)\n",
        "#test B with oxygen and oxygen\n",
        "test2 = height(8,8,15.999,15.999)\n",
        "#test C with hydrogen and oxygen\n",
        "test3 = height(1,8,1.00784,15.999)\n",
        "#print tests\n",
        "print(test1)\n",
        "print(test2)\n",
        "print(test3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I8QFdg0xh7Cq",
        "outputId": "d4f9da6a-dc8d-478e-81ec-182466392272"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.596847478473476 MeV\n",
            "15.19881008217774 MeV\n",
            "2.7181641512959223 MeV\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.testing import test\n",
        "#calculating probability of tunneling\n",
        "\n",
        "def POT(E,V,L,m):\n",
        "#E = total kinetic energy in MeV\n",
        "#V = height of barier in MeV\n",
        "#L = width of barrier in pm\n",
        "#m = mass of particle (u)\n",
        "  E = E * (10**6)\n",
        "  V = V * (10**6)\n",
        "  m = m * (1.6605402 * (10**-27)) #turn into kg\n",
        "  L = L * (10**-12)\n",
        "  A = (-4*L*pi)/h\n",
        "  B = (V-E)*(1.6*(10**-19)) #convert into J\n",
        "  C = math.sqrt(2*m*(B))\n",
        "  P = math.exp(A*C)\n",
        "  P = P * 100\n",
        "  if P > 0.005:\n",
        "    a = P\n",
        "  else:\n",
        "    a = (\"{:e}\".format(P))\n",
        "  return \"probability of tunneling: \" + str(a) + \"%\"\n",
        "\n",
        "electron = 9.10 * (10**-31)\n",
        "atom = 1.67 * (10**-27)\n",
        "\n",
        "#tests\n",
        "#test A with hydrogen and hydrogen\n",
        "test1a = POT(0.59684747847,0.596847478473476,100,1.00784)\n",
        "test2b = POT(15.198810009,15.19881008217774,100,15.999)\n",
        "test3b = POT(2.7181641486,2.7181641512959223,100,1.00784)\n",
        "\n",
        "test4b = POT(0.5968474784734,0.596847478473476,100,1.00784)\n",
        "#print tests\n",
        "print(test1a)\n",
        "print(test2b)\n",
        "print(test3b)\n",
        "\n",
        "#1: https://chem.libretexts.org/Courses/University_of_California_Davis/UCD_Chem_107B%3A_Physical_Chemistry_for_Life_Scientists/Chapters/4%3A_Quantum_Theory/4.09%3A_Quantum-Mechanical_Tunneling\n",
        "#2: https://www.youtube.com/watch?v=1V4-BhzWB5w\n",
        "#3: https://www.numerade.com/ask/question/an-electron-with-kinetic-energy-e-600-ev-is-incident-on-a-barrier-of-width-l-0150-nm-and-height-u-100-ev-a-what-is-the-probability-that-the-electron-tunnels-through-the-barrier-use-911-10-31-54046/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "64JtK9c9QBkd",
        "outputId": "13b60ea3-ba1c-4b57-f91a-d021d4706151"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "probability of tunneling: 92.14313549581266%\n",
            "probability of tunneling: 2.859666e-19%\n",
            "probability of tunneling: 10.24062762361354%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def POT(Z1,Z2,MA,MB,E): \n",
        "#charge 1\n",
        "#charge 2\n",
        "#mass 1\n",
        "#mass 2\n",
        "#E = total kinetic energy in MeV of particle\n",
        "  L = 100\n",
        "  RA = r0 * (MA ** (1/3)) #returns fm\n",
        "  RB = r0 * (MB ** (1/3)) #fm\n",
        "  d = RA + RB\n",
        "  J = (Z1*Z2*(e**2))/(4*pi*ez*(d*(10**-15)))\n",
        "  MeV = J * (6.242 * (10**12))\n",
        "\n",
        "  E = E * (10**6)\n",
        "  MeV = MeV * (10**6)\n",
        "  m = MA * (1.6605402 * (10**-27)) #turn into kg\n",
        "  L = L * (10**-12)\n",
        "  A = (-4*L*pi)/h\n",
        "  B = (MeV-E)*(1.6*(10**-19)) #convert into J\n",
        "  C = math.sqrt(2*m*(B))\n",
        "  P = math.exp(A*C)\n",
        "  P = P * 100\n",
        "  if P > 0.005:\n",
        "    a = P\n",
        "  else:\n",
        "    a = (\"{:e}\".format(P))\n",
        "  return \"probability of tunneling: \" + str(a) + \"%\"\n",
        "\n",
        "test1 = POT(1,1,1.00784,1.00784,0.59684747847)\n",
        "\n",
        "print(test1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2WrZ_1btUeYY",
        "outputId": "9689fe41-47e2-4c9f-b48f-0c989ac823df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "probability of tunneling: 92.14313549581266%\n"
          ]
        }
      ]
    }
  ]
}
